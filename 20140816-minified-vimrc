""""""""""""""""""""""""""""""""""""""""""""" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" => Vundle Configuration""""""""""""""""""""""""""""""""""""""""""""set nocompatible	" be iMproved, requiredfiletype off		" required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#rc()Bundle 'gmarik/Vundle.vim'Bundle 'bling/vim-airline'Bundle 'plasticboy/vim-markdown'" vim less and scss editing and color previewBundle 'vim-less'Bundle 'hail2u/vim-css3-syntax'Bundle "mattn/emmet-vim"Bundle 'cakebaker/scss-syntax.vim'Bundle 'kien/ctrlp.vim'Bundle 'https://github.com/gorodinskiy/vim-coloresque.git'Bundle 'mhinz/vim-startify'if executable('ag')    Bundle 'rking/ag.vim'endifif executable('git')    Bundle 'tpope/vim-fugitive'endifBundle 'lepture/vim-velocity'Bundle 'tpope/vim-surround'Bundle 'scrooloose/syntastic'Bundle 'elzr/vim-json'Bundle 'terryma/vim-expand-region'Bundle "flazz/vim-colorschemes"Bundle 'vim-scripts/gitignore'Bundle 'godlygeek/tabular'Bundle 'digitaltoad/vim-jade'Bundle "myusuf3/numbers.vim"Bundle 'chrisbra/SudoEdit.vim'" => Bundle plugins for coffeescriptBundle 'kchmck/vim-coffee-script'Bundle 'othree/coffee-check.vim'" => autocompleteBundle 'snipmate-snippets'Bundle 'Shougo/neosnippet'Bundle 'Shougo/neosnippet-snippets'Bundle 'honza/vim-snippets'" javascript source beautifyBundle 'michalliu/sourcebeautify.vim'Bundle 'maksimr/vim-jsbeautify'filetype plugin indent on""""""""""""""""""""""""""""""""""""""""""""" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" => Personal Customization Settings""""""""""""""""""""""""""""""""""""""""""""if has('gui_running')  set guifont=Inconsolata-dz\ for\ Powerline:h14endifset titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}set laststatus=2set expandtabcolorscheme solarizedset tabstop=4set softtabstop=4set shiftwidth=4set nuset nobackupset showtabline=2 " always show tablineset noswapfile"set wildmenu " Show list instead of just completing"set wildmode=list:longest,full " Use powerful wildmenuset shortmess=at " Avoids 'hit enter'set showcmd " Show keystroke in cmd lineset fdm=indent " set foldmethod to indent" => Tricks: show tab number on tab top"set guitablabel=%N:%M%t	" show tab index in the tabline" *	Ngt will switch to tab N. For example, 3gt goes to tab 3." *	:tabm2 moves the current tab to appear after tab 2."	To move this tab to the first position, use :tabm0"	To move this tab to the last position, just use :tabm" @url: http://vim.wikia.com/wiki/Show_tab_number_in_your_tab_line" set up tab labels with tab number, buffer name, number of windowsfunction! GuiTabLabel()  let label = ''  let bufnrlist = tabpagebuflist(v:lnum)  " Add '+' if one of the buffers in the tab page is modified  for bufnr in bufnrlist    if getbufvar(bufnr, "&modified")      let label = '+'      break    endif  endfor  " Append the tab number  let label .= v:lnum.': '  " Append the buffer name  let name = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])  if name == ''    " give a name to no-name documents    if &buftype=='quickfix'      let name = '[Quickfix List]'    else      let name = '[No Name]'    endif  else    " get only the file name    let name = fnamemodify(name,":t")  endif  let label .= name  " Append the number of windows in the tab page  let wincount = tabpagewinnr(v:lnum, '$')  return label . '  [' . wincount . ']'endfunctionset guitablabel=%{GuiTabLabel()}set viewoptions+=slash,unix " Better Unix/Windows compatibilityset viewoptions-=options " in case of mapping changeset fileformats=mac,unix,dosset timeoutlen=500 " Time to wait for a commandset autoread " Set autoread when a file is changed outsideset autowriteset hidden	"  Turn on hidden, it hide buffers instead of closing themset history=1000 " Increase the lines of historyset undolevels=1000 " Use many muchos levels of undoset clipboard=unnamed " Yanks go on clipboard insteadset encoding=utf-8 " Set utf-8 encodingset completeopt+=longest " Optimize auto completeset completeopt-=preview " Optimize auto completeset noerrorbells  " don't beepset novisualbell  " don't beepset t_vb=set hlsearchset incsearchset cursorlineset cursorcolumnset showmatch " Show matching brackets/parenthesisset matchtime=2set mousehide " Hide mouse after chars typedset mouse=a   " Mouse in all modesset background=dark" autocompletion with dictionary helpset dictionary=/usr/share/dict/wordsfiletype plugin indent on""""""""""""""""""""""""""""""""""""""""""""" => personal shortcuts, key mappings"""""""""""""""""""""""""""""""""""""""""""""let mapleader=',' " Change the mapleaderlet mapleader = "\<Space>"  " change default leader to leader keynnoremap <Leader>x :tabedit $MYVIMRC<CR>nnoremap ; :" Make j and k work the way you expectnnoremap j gjnnoremap k gkvnoremap j gjvnoremap k gk" Navigation between windowsnnoremap <C-J> <C-W>jnnoremap <C-K> <C-W>k nnoremap <C-L> <C-W>l nnoremap <C-H> <C-W>h vmap <Leader>y "+yvmap <Leader>d "+dnmap <Leader>p "+p""""""""""""""""""""""""""""""""""""""""""""nmap <Leader>P "+P" => auto commands for vimvmap <Leader>p "+p""""""""""""""""""""""""""""""""""""""""""""vmap <Leader>P "+Pautocmd BufWritePost .vimrc source $MYVIMRCnmap <Leader>h :nohlsearch<CR>nmap <Leader>n :set nu<CR>nnoremap <Leader>s :source $MYVIMRC<CR>nnoremap <C-S> :w<CR>"nmap <Leader><Leader> Vnnoremap <Leader>e :e ++enc=gbk<CR>nnoremap <Leader>. :e .<CR>nnoremap <Leader>3 :e #<CR>" Make a simple "search" text object.vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gvomap s :normal vs<CR>" Automatically jump to end of text you pastedvnoremap <silent> y y`]vnoremap <silent> p p`]nnoremap <silent> p p`]" vp doesn't replace paste bufferfunction! RestoreRegister()	let @" = s:restore_reg	return ''endfunctionfunction! s:Repl()	let s:restore_reg = @"	return "p@=RestoreRegister()\<cr>"endfunctionvmap <silent> <expr> p <sid>Repl()nnoremap <CR> Gnnoremap <BS> gg" quickly select text just pastednoremap gV `[v`]" stop commandline window from popping upmap q: :q""""""""""""""""""""""""""""""""""""""""""""" => vim plugins settings""""""""""""""""""""""""""""""""""""""""""""" =>  'bling/vim-airline'let g:airline#extensions#tabline#enabled = 0let g:airline#extensions#tabline#left_sep = ' 'let g:airline#extensions#tabline#left_alt_sep = '|'let g:airline_powerline_fonts = 1let g:airline_theme = 'powerlineish'" => setting for native netrw plugin"let g:netrw_banner       = 0"let g:netrw_keepdir      = 0"let g:netrw_liststyle    = 1 " or 3"let g:netrw_sort_options = 'i'" => setting for 'skammer/vim-css-color'let g:cssColorVimDoNotMessMyUpdatetime = 1" => setting for 'kien/ctrlp.vim'"nnoremap <Leader>o :CtrlP<CR>" make ctrlp plugin faster for Git projectslet g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']let g:ctrlp_use_caching = 0" => setting for 'terryma/vim-expand-region'vmap v <Plug>(expand_region_expand)vmap <C-v> <Plug>(expand_region_shrink)" => setting for 'othree/coffee-check.vim'au BufRead,BufNewFile *.coffee set ft=coffee" enable error highlighting altogetherlet g:coffeeCheckHighlightErrorLine = 1" disable error line signlet g:coffeeCheckSignErrorLine = 0" => tricks of using vim" one command :help for everything!" help quickref" => useful shortcuts" z<CR>  or zt	redraw, current line at top of window" z.	 or zz	redraw, current line at center of window" z-	 or zb	redraw, current line at bottom of window" CTRL-G	  show current file name (with path) and cursor position" ga		    show ascii value of character under cursor in decimal, hex, and octal" g8		    for utf-8 encoding: show byte sequence for character under cursor in hex" g CTRL-G	show cursor column, line, and character position" => input digraphs" =================" 1. :setlocal digraph" 2. input first char and backspace and input second char" =================" in insert mode, press ctrl+k and input the chars for a digraph" => options settings " =================" :set {option}?    show value of {option}" :set {option}&    reset {option} to its default value" :options          open a new window to view and set options, grouped by"                   functionality, a one line explanation and links to its"                   help" => open buffer in split mode" :vsp | b {buffername}" :vert sb N " Open a left vertical split(default on the left split window)" :vert belowright sb N " Open a split to the right" => split window operations" Ctrl+w+[HJKL] change split window to current windows' hjkl position""""""""""""""""""""""""""""""""""""""""""""" => modeline for vimrc file""""""""""""""""""""""""""""""""""""""""""""" vim: set expandtab sts=2 ts=2 sw=2 tw=78: