set nocompatible " Get out of VI's compatible modefiletype plugin indent on " Enable filetypelet mapleader=',' " Change the mapleaderlet maplocalleader='\' " Change the maplocalleaderset timeoutlen=500 " Time to wait for a command" Source the vimrc file after saving itautocmd BufWritePost .vimrc source $MYVIMRC" Fast edit the .vimrc file using ',x'nnoremap <Leader>x :tabedit $MYVIMRC<CR>set autoread " Set autoread when a file is changed outsideset autowrite " Write on make/shell commandsset hidden " Turn on hidden"set history=1000 " Increase the lines of history"set clipboard+=unnamed " Yanks go on clipboard insteadset clipboard=unnamed " Yanks go on clipboard insteadset spell " Spell checking onset modeline " Turn on modelineset encoding=utf-8 " Set utf-8 encodingset completeopt+=longest " Optimize auto completeset completeopt-=preview " Optimize auto completeset mousehide " Hide mouse after chars typedset mouse=a " Mouse in all modesset backup " Set backupset undofile " Set undo" Set directoriesfunction! InitializeDirectories()    let parent=$HOME    let prefix='.vim'    let dir_list={                \ 'backup': 'backupdir',                \ 'view': 'viewdir',                \ 'swap': 'directory',                \ 'undo': 'undodir'}    for [dirname, settingname] in items(dir_list)        let directory=parent.'/'.prefix.'/'.dirname.'/'        if !isdirectory(directory)            if exists('*mkdir')                call mkdir(directory)                exec 'set '.settingname.'='.directory            else                echo "Warning: Unable to create directory: ".directory                echo "Try: mkdir -p ".directory            endif        else            exec 'set '.settingname.'='.directory        endif    endforendfunctioncall InitializeDirectories()autocmd BufWinLeave *.* silent! mkview " Make Vim save view (state) (folds, cursor, etc)autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cursor, etc)" No sound on errorsset noerrorbellsset novisualbellset t_vb="""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Platform Specific Configuration"-------------------------------------------------" On Windows, also use '.vim' instead of 'vimfiles'if has('win32') || has('win64')    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/afterendifset viewoptions+=slash,unix " Better Unix/Windows compatibilityset viewoptions-=options " in case of mapping changeset fileformats=mac,unix,dos " Auto detect the file formats"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Plugin"--------------------------------------------------filetype off " Required!let g:vundle_default_git_proto='git'set rtp+=~/.vim/bundle/vundle/call vundle#rc()" Let Vundle manage VundleBundle 'gmarik/vundle'Bundle 'bling/vim-airline'Bundle 'plasticboy/vim-markdown'Bundle 'skammer/vim-css-color'Bundle 'digitaltoad/vim-jade'Bundle "myusuf3/numbers.vim"" make <CTR-F> and <CTR-B> smoothBundle 'yonchu/accelerated-smooth-scroll'Bundle 'Haml'Bundle 'PIV'Bundle 'commentary.vim'Bundle "mattn/emmet-vim"Bundle 'matchit.zip'Bundle 'nginx.vim'Bundle 'prefixer.vim'Bundle 'rainbow_parentheses.vim'Bundle 'cakebaker/scss-syntax.vim'Bundle 'snipmate-snippets'Bundle "flazz/vim-colorschemes"Bundle 'tpope/vim-commentary'Bundle 'hail2u/vim-css3-syntax'" UI AdditionsBundle 'w0ng/vim-hybrid'Bundle 'chriskempson/vim-tomorrow-theme'Bundle 'altercation/vim-colors-solarized'Bundle 'nanotech/jellybeans.vim'if has("python") || has("python3")    Bundle 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}    let old_powerline=0else    Bundle 'Lokaltog/vim-powerline'    let old_powerline=1endifBundle 'nathanaelkane/vim-indent-guides'Bundle 'chrisbra/NrrwRgn'"Bundle 'mhinz/vim-startify'" NavigationBundle 'Lokaltog/vim-easymotion'Bundle 'terryma/vim-multiple-cursors'"Bundle 'bkad/camelcasemotion'"Bundle 'michaeljsmith/vim-indent-object'Bundle 'coderifous/textobj-word-column.vim'Bundle 'tpope/vim-unimpaired'Bundle 'zhaocai/GoldenView.Vim'"if has('python')"    Bundle 'sjl/gundo.vim'"endifif executable('ctags')    Bundle 'majutsushi/tagbar'endifBundle 'Shougo/unite.vim'Bundle 'scrooloose/nerdtree'Bundle 'kien/ctrlp.vim'if executable('ag')    Bundle 'rking/ag.vim'elseif executable('ack-grep') || executable('ack')    Bundle 'mileszs/ack.vim'endif"if executable('git')    Bundle 'tpope/vim-fugitive'"endif"Bundle 'gmarik/sudo-gui.vim'Bundle 'chrisbra/SudoEdit.vim'"if has('ruby')    Bundle 'benmills/vimux'"endif"Bundle 'tsaleh/vim-matchit'" CommandsBundle 'lepture/vim-velocity'Bundle 'rizzatti/dash.vim'Bundle 'scrooloose/nerdcommenter'Bundle 'tpope/vim-surround'Bundle 'tpope/vim-abolish'Bundle 'godlygeek/tabular'Bundle 'AndrewRadev/splitjoin.vim'"Bundle 'techlivezheng/vim-plugin-minibufexpl'Bundle 's3rvac/AutoFenc'if has('python')    Bundle 'mutewinter/swap-parameters'endifBundle 'vim-coffee-script'Bundle 'coffee-check.vim'Bundle 'coffee.vim'Bundle 'jshint.vim'"Bundle 'leoshawn/csslint.vim'Bundle 'xuhdev/SingleCompile'" Automatic HelperBundle 'Shougo/neocomplcache'Bundle 'Raimondi/delimitMate'Bundle 'scrooloose/syntastic'Bundle 'tpope/vim-speeddating'" Language relatedBundle 'tpope/vim-rails'Bundle 'mattn/zencoding-vim'Bundle 'swaroopch/vim-markdown-preview'Bundle 'sampsyo/autolink.vim'Bundle 'wikitopian/hardmode'Bundle 'LaTeX-Box-Team/LaTeX-Box'" Others"if executable('ctags')"    Bundle 'xolox/vim-easytags'"endifBundle 'h1mesuke/unite-outline'Bundle 'tpope/vim-repeat'Bundle 'jistr/vim-nerdtree-tabs'Bundle 'Shougo/neosnippet'Bundle 'Shougo/neosnippet-snippets'Bundle 'honza/vim-snippets'Bundle 'xolox/vim-misc'Bundle 'groenewege/vim-less'Bundle 'juvenn/mustache.vim'Bundle 'mustache/vim-mustache-handlebars'Bundle 'elzr/vim-json'" Local bundles if avaiableif filereadable(expand("~/.vimrc.bundles.local"))    source ~/.vimrc.bundles.localendiffiletype plugin indent on " Required!"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Vim User Interface"-------------------------------------------------" Set titleset titleset titlestring=%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}" Set tablineset showtabline=2 " Always show tab line" Set up tab labels"set guitablabel=%m%N:%t\[%{tabpagewinnr(v:lnum)}\]"set tabline=%!MyTabLine()"function! MyTabLine()"    let s=''"    let t=tabpagenr() " The index of current page"    let i=1"    while i<=tabpagenr('$') " From the first page"      let buflist=tabpagebuflist(i)"      let winnr=tabpagewinnr(i)"      let s.=(i==t?'%#TabLineSel#':'%#TabLine#')"      let s.='%'.i.'T'"      let s.=' '"      let bufnr=buflist[winnr - 1]"      let file=bufname(bufnr)"      let m=''"      if getbufvar(bufnr, "&modified")"          let m='[+]'"      endif"      if file=~'\/.'"          let file=substitute(file,'.*\/\ze.','','')"      endif"      if file==''"        let file='[No Name]'"      endif"      let s.=m"      let s.=i.':'"      let s.=file"      let s.='['.winnr.']'"      let s.=' '"      let i=i+1"    endwhile"    let s.='%T%#TabLineFill#%='"    let s.=(tabpagenr('$')>1?'%999XX':'X')"    return s"endfunction" Set up tab tooltips with every buffer name"set guitabtooltip=%F" Set status lineset laststatus=2 " Show the statuslineset noshowmode " Hide the default mode text" Set the style of the status line" Use powerline to modify the statuls lineif has('gui_running') && (!has('win64') || !has('win32')) && old_powerline == 1  let g:Powerline_symbols='unicode'endif" Only have cursorline in current window and in normal windowautocmd WinLeave * set nocursorlineautocmd WinLeave * set nocursorcolumnautocmd WinEnter * set cursorlineautocmd WinEnter * set cursorcolumnauto InsertEnter * set nocursorlineauto InsertEnter * set nocursorcolumnauto InsertLeave * set cursorlineauto InsertLeave * set cursorcolumnset wildmenu " Show list instead of just completingset wildmode=list:longest,full " Use powerful wildmenuset shortmess=at " Avoids 'hit enter'set showcmd " Show cmdset backspace=indent,eol,start " Make backspaces delete sensiblyset whichwrap+=h,l,<,>,[,] " Backspace and cursor keys wrap toset virtualedit=block,onemore " Allow for cursor beyond last characterset scrolljump=5 " Lines to scroll when cursor leaves screenset scrolloff=3 " Minimum lines to keep above and below cursorset sidescroll=1 " Minimal number of columns to scroll horizontallyset sidescrolloff=10 " Minimal number of screen columns to keep away from cursorset showmatch " Show matching brackets/parenthesisset matchtime=2 " Decrease the time to blink" Use Tab instead of % to switch using matchitnmap <Tab> %vmap <Tab> %set number " Show line numbers" Toggle relativenumberfunction! ToggleRelativenumber()    if &number==1        set relativenumber    else        set number    endifendfunctionnnoremap <Leader>n :call ToggleRelativenumber()<CR>set formatoptions+=rnlmM " Optimize format optionsset wrap " Set wrapset textwidth=80 " Change text widthset colorcolumn=+1 " Indicate text border"set list " Show these tabs and spaces and so on"set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars"set linebreak " Wrap long lines at a blank"set showbreak=↪  " Change wrap line break"set fillchars=diff:⣿,vert:│ " Change fillchars" Only show trailing whitespace when not in insert mode"augroup trailing"    autocmd!"    "autocmd InsertEnter * :set listchars-=trail:⌴"    autocmd InsertEnter * :set nolist"    autocmd InsertLeave * :set listchars+=trail:⌴"    "autocmd InsertLeave * :set listchars+=trail:⌴"    autocmd InsertLeave * :set list"augroup END" Set gVim UI settingif has('gui_running')    set guioptions-=m    set guioptions-=Tendif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Colors and Fonts"-------------------------------------------------syntax on " Enable syntaxset background=dark " Set backgroundif !has('gui_running')    set t_Co=256 " Use 256 colorsendifcolorscheme molokai " Load a colorscheme"colorscheme desertnnoremap <silent>\t :colorscheme Tomorrow-Night-Eighties<CR>nnoremap <silent>\j :colorscheme jellybeans<CR>nnoremap <silent>\h :colorscheme hybrid<CR>if has('gui_running')    nnoremap <silent>\t :colorscheme Tomorrow-Night<CR>    nnoremap <silent>\s :colorscheme solarized<CR>endif"set guifont=Inconsolata-dz\ for\ Powerline:h16if has('gui_running')  set guifont=Inconsolata-dz\ for\ Powerline:h16  "set guifont=Source\ Code\ Pro\ for\ Powerline:h16  "set guifont=Ubuntu\ Mono\ derivative\ Powerline:h16"    if has('gui_gtk')"        set guifont=DejaVu\ Sans\ Mono\ 11"    elseif has('gui_macvim')"        "set guifont=Monaco:h11"        set guifont=Inconsolata \ for \ Powerline:h11"    elseif has('gui_win32')"        set guifont=Consolas:h11:cANSI"    endifendif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Indent and Tab Related"-------------------------------------------------set autoindent " Preserve current indent on new linesset cindent " set C style indentset expandtab " Convert all tabs typed to spacesset softtabstop=2 " Indentation levels every four columnsset shiftwidth=2 " Indent/outdent by four columnsset shiftround " Indent/outdent to nearest tabstopset tabstop=2set smartindent"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Search Related"-------------------------------------------------set ignorecase " Case insensitive searchset smartcase " Case sensitive when uc presentset hlsearch " Highlight search termsset incsearch " Find as you type searchset gdefault " turn on 'g' flag" Use sane regexes"nnoremap / /\v"vnoremap / /\v"cnoremap s/ s/\v"nnoremap ? ?\v"vnoremap ? ?\v"cnoremap s? s?\v" Keep search matches in the middle of the windownnoremap n nzzzvnnoremap N Nzzzvnnoremap * *zzzvnnoremap # #zzzvnnoremap g* g*zzzvnnoremap g# g#zzzv" Visual search mappingsfunction! s:VSetSearch()    let temp=@@    normal! gvy    let @/='\V'.substitute(escape(@@, '\'), '\n', '\\n', 'g')    let @@=tempendfunctionvnoremap * :<C-U>call <SID>VSetSearch()<CR>//<CR>vnoremap # :<C-U>call <SID>VSetSearch()<CR>??<CR>" Use ,Space to toggle the highlight searchnnoremap <Leader><Space> :set hlsearch!<CR>"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Fold Related"-------------------------------------------------set foldlevelstart=0 " Start with all folds closedset foldcolumn=1 " Set fold column" Space to toggle and create folds.nnoremap <silent><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>vnoremap <Space> zf" Set foldtext"function! MyFoldText()"    let line=getline(v:foldstart)"    let nucolwidth=&foldcolumn+&number*&numberwidth"    let windowwidth=winwidth(0)-nucolwidth-3"    let foldedlinecount=v:foldend-v:foldstart+1"    let onetab=strpart('          ', 0, &tabstop)"    let line=substitute(line, '\t', onetab, 'g')"    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))"    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)"    return line.'…'.repeat(" ",fillcharcount).foldedlinecount.'…'.' '"endfunction"set foldtext=MyFoldText()"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Filetype Specific"-------------------------------------------------" QuickFixaugroup ft_quickfix    autocmd!    autocmd Filetype qf setlocal colorcolumn=0 nolist nocursorline nowrap textwidth=0augroup END" Markdownaugroup ft_markdown    autocmd!    " Use <localLeader>1/2/3/4/5/6 to add headings    autocmd Filetype markdown nnoremap <buffer> <localLeader>1 I# <ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>2 I## <ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>3 I### <ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>4 I#### <ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>5 I##### <ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>6 I###### <ESC>    " Use <LocalLeader>b to add blockquotes in normal and visual mode    autocmd Filetype markdown nnoremap <buffer> <localLeader>b I> <ESC>    autocmd Filetype markdown vnoremap <buffer> <localLeader>b :s/^/> /<CR>    " Use <localLeader>ul and <localLeader>ol to add list symbols in visual mode    autocmd Filetype markdown vnoremap <buffer> <localLeader>ul :s/^/* /<CR>    autocmd Filetype markdown vnoremap <buffer> <LocalLeader>ol :s/^/\=(line(".")-line("'<")+1).'. '/<CR>    " Use <localLeader>e1/2/3 to add emphasis symbols    autocmd Filetype markdown nnoremap <buffer> <localLeader>e1 I*<ESC>A*<ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>e2 I**<ESC>A**<ESC>    autocmd Filetype markdown nnoremap <buffer> <localLeader>e3 I***<ESC>A***<ESC>    " Use <Leader>P to preview markdown file in browser    autocmd Filetype markdown nnoremap <buffer> <Leader>P :MarkdownPreview<CR>augroup END" LESSaugroup ft_less    autocmd!    autocmd filetype less nnoremap <buffer> <Leader>r :w <BAR> !lessc % > %:t:r.css<CR><Space>augroup END" Pythonaugroup ft_python    " Indent Python in the Google way.    let s:maxoff = 50 " maximum number of lines to look backwards.    function! GetGooglePythonIndent(lnum)        " Indent inside parens.        " Align with the open paren unless it is at the end of the line.        " E.g.        "   open_paren_not_at_EOL(100,        "                         (200,        "                          300),        "                         400)        "   open_paren_at_EOL(        "       100, 200, 300, 400)        call cursor(a:lnum, 1)        let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',                    \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"                    \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"                    \ . " =~ '\\(Comment\\|String\\)$'")        if par_line > 0            call cursor(par_line, 1)            if par_col != col("$") - 1                return par_col            endif        endif        " Delegate the rest to the original function.        return GetPythonIndent(a:lnum)    endfunction    function! ChoosePythonCompiler()        echo "Please choose python compiler:\n"        echo "1. Python2+\n"        echo "2. Python3+\n"        let flag=getchar()        if flag==49            call SingleCompile#ChooseCompiler('python', 'python')            execute 'SingleCompileRun'        elseif flag==50            call SingleCompile#ChooseCompiler('python', 'python3')            execute 'SingleCompileRun'        endif    endfunction    let pyindent_nested_paren="&sw*2"    let pyindent_open_paren="&sw*2"    autocmd!    autocmd filetype python setlocal indentexpr=GetGooglePythonIndent(v:lnum)    autocmd filetype python nnoremap <buffer> <Leader>r :call ChoosePythonCompiler()<CR>augroup END" Perlaugroup ft_perl    let perl_include_pod=1    let perl_extended_vars=1    let perl_sync_dist=250    autocmd!    autocmd filetype perl setlocal keywordprg=perldoc\ -faugroup END"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""-------------------------------------------------" => Key Mapping"-------------------------------------------------" Make j and k work the way you expectnnoremap j gjnnoremap k gkvnoremap j gjvnoremap k gk" Navigation between windowsnnoremap <C-J> <C-W>jnnoremap <C-K> <C-W>k " Same when jumping aroundnnoremap g; g;zznnoremap g, g,zz" Reselect visual block after indent/outdentvnoremap < <gvvnoremap > >gv" Repeat last substitution, including flags, with &.nnoremap & :&&<CR>xnoremap & :&&<CR>" Keep the cursor in place while joining linesnnoremap J mzJ`z" Select entire buffernnoremap vaa ggvGg_nnoremap Vaa ggVG" Map \<Space> to commentingfunction! IsWhiteLine()    if (getline(".")=~"^$")        let oldlinenumber=line(".")        :call NERDComment('n', 'Sexy')        if (line(".")==oldlinenumber)            :call NERDComment('n', 'Append')        else            normal! k            startinsert!        endif    else        normal! A         :call NERDComment('n', 'Append')    endifendfunctionnnoremap <silent>\<Space> :call IsWhiteLine()<CR>" Strip all trailing whitespace in the current filennoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>" See the differences between the current buffer and the file it was loaded fromcommand! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_    \ | diffthis | wincmd p | diffthis"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Local Setting"--------------------------------------------------" Use local vimrc if availableif filereadable(expand("~/.vimrc.local"))    source ~/.vimrc.localendif" Use local gvimrc if available and gui is runningif has('gui_running')    if filereadable(expand("~/.gvimrc.local"))        source ~/.gvimrc.local    endifendif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Tagbar"--------------------------------------------------nnoremap <Leader>t :TagbarToggle<CR>let g:tagbar_autofocus=1let g:tagbar_expand=1let g:tagbar_foldlevel=2let g:tagbar_ironchars=['▾', '▸']let g:tagbar_autoshowtag=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => NERD_tree"--------------------------------------------------nnoremap <Leader>d :NERDTreeTabsToggle<CR>nnoremap <Leader>f :NERDTreeFind<CR>let NERDTreeChDirMode=2let NERDTreeShowBookmarks=1let NERDTreeShowHidden=1let NERDTreeShowLineNumbers=1let NERDTreeDirArrows=1let g:nerdtree_tabs_open_on_gui_startup=0"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => NERD_commenter"--------------------------------------------------let NERDCommentWholeLinesInVMode=2let NERDSpaceDelims=1let NERDRemoveExtraSpaces=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Neocomplcache"--------------------------------------------------let g:neocomplcache_enable_at_startup=1let g:neocomplcache_enable_auto_delimiter=1let g:neocomplcache_enable_camel_case_completion=1let g:neocomplcache_enable_underbar_completion=1let g:snips_author='Xiao-Ou Zhang <kepbod@gmail.com>'" Tell Neosnippet about the other snippetslet g:neosnippet#snippets_directory="$HOME/.vim/bundle/vim-snippets/snippets"let g:neosnippet#enable_snipmate_compatibility=1" Plugin key-mappingsimap <C-K> <Plug>(neosnippet_expand_or_jump)smap <C-K> <Plug>(neosnippet_expand_or_jump)xmap <C-K> <Plug>(neosnippet_expand_target)" Map <C-E> to cancel completioninoremap <expr><C-E> neocomplcache#cancel_popup()" SuperTab like snippets behaviorinoremap <expr><Tab> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-N>" : "\<Tab>"snoremap <expr><Tab> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<Tab>"inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"" CR/S-CR: close popup and save indentinoremap <expr><CR> delimitMate#WithinEmptyPair() ? "\<C-R>=delimitMate#ExpandReturn()\<CR>" : pumvisible() ? neocomplcache#close_popup() : "\<CR>"inoremap <expr><S-CR> pumvisible() ? neocomplcache#close_popup() "\<CR>" : "\<CR>"" For snippet_complete markerif has('conceal')    set conceallevel=2 concealcursor=iendif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => delimitMate"--------------------------------------------------let delimitMate_expand_cr=1let delimitMate_expand_space=1let delimitMate_balance_matchpairs=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Ctrlp"--------------------------------------------------let g:ctrlp_working_path_mode='ra'" 'c' - the directory of the current file." 'r' - the nearest ancestor that contains one of these directories or files: .git .hg .svn .bzr _darcs" 'a' - like c, but only if the current working directory outside of CtrlP is not a direct ancestor of the directory of the current file." 0 or '' (empty string) - disable this feature.let g:ctrlp_clear_cache_on_exit=0let g:ctrlp_cache_dir=$HOME.'/.vim/.cache/ctrlp'let g:ctrlp_extensions=['tag', 'buffertag', 'quickfix', 'dir', 'rtscript']"set wildignore+=*/tmp/*,*.so,*.swp,*.zip    "MacOSX/Linux"set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe   "Windows"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'"let g:ctrlp_custom_ignore = {"  \ 'dir':  '\v[\/]\.(git|hg|svn)$',"  \ 'file': '\v\.(exe|so|dll)$',"  \ 'link': 'some_bad_symbolic_links'"  \ }"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Ag(Ack)"--------------------------------------------------if executable('ag')    nnoremap <Leader>a :Ag<Space>elseif executable('ack-grep') || executable('ack')    nnoremap <Leader>a :Ack!<Space>endifif !executable('ag') && has('unix') && executable('ack-grep')    let g:ackprg='ack-grep -H --nocolor --nogroup --column'    let g:aghighlight=1endif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Syntastic"--------------------------------------------------nnoremap <Leader>s :Errors<CR>let g:syntastic_check_on_open=0let g:syntastic_auto_jump=0let g:syntastic_stl_format='[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'"set statusline+=%{SyntasticStatuslineFlag()}"let g:syntastic_mode_map = { 'mode': 'active',"                            \ 'active_filetypes': ['ruby', 'php', 'js'],"                            \ 'passive_filetypes': ['puppet'] }"highlight SyntasticErrorSign guifg=white guibg=red"highlight SyntasticError guibg=#2f0000"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Indent Guides"--------------------------------------------------if !has('gui_running')    let g:indent_guides_auto_colors=0    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=237    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=239endif"let g:indent_guides_enable_on_vim_startup=0let g:indent_guides_guide_size=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => fugitive"--------------------------------------------------if executable('git')    nnoremap <silent> <leader>gs :Gstatus<CR>    nnoremap <silent> <leader>gd :Gdiff<CR>    nnoremap <silent> <leader>gc :Gcommit<CR>    nnoremap <silent> <leader>gb :Gblame<CR>    nnoremap <silent> <leader>gl :Glog<CR>    nnoremap <silent> <leader>gp :Git push<CR>endif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Gundo"--------------------------------------------------if has('python')    nnoremap <Leader>u :GundoToggle<CR>endif"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => EasyTags"--------------------------------------------------function! InitializeTagDirectory()    let parent=$HOME    let prefix='.vim'    let dirname='tags'    let directory=parent.'/'.prefix.'/'.dirname.'/'    if !isdirectory(directory)        if exists('*mkdir')            call mkdir(directory)            let g:easytags_by_filetype=directory        else            echo "Warning: Unable to create directory: ".directory            echo "Try: mkdir -p ".directory        endif    else        let g:easytags_by_filetype=directory    endifendfunctioncall InitializeTagDirectory()let g:easytags_python_enabled=1let g:easytags_python_script=1let g:easytags_include_members=1highlight cMember gui=italic"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => SingleCompile"--------------------------------------------------nnoremap <Leader>r :SingleCompileRun<CR>let g:SingleCompile_showquickfixiferror=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Zencoding"--------------------------------------------------let g:user_zen_leader_key='<C-Z>'let g:user_zen_settings={'indentation':'   '}"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => GoldenView"--------------------------------------------------let g:goldenview__enable_default_mapping=0nmap <silent> <C-N> <Plug>GoldenViewSplitnmap <silent> <C-G> <Plug>GoldenViewSwitchTogglenmap <silent> <C-H> <Plug>GoldenViewNextnmap <silent> <C-L> <Plug>GoldenViewPrevious"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Splitjoin"--------------------------------------------------let g:splitjoin_split_mapping = ',k'let g:splitjoin_join_mapping = ',j'let g:splitjoin_normalize_whitespace=1let g:splitjoin_align=1"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => Unite"--------------------------------------------------nnoremap <Leader>m :Unite<Space>let g:unite_update_time=4000"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""--------------------------------------------------" => vimux"--------------------------------------------------nnoremap <Leader>vp :VimuxPromptCommand<CR>vnoremap <Leader>vs "vy :call VimuxRunCommand(@v . "\n", 0)<CR>nnoremap <Leader>vx :VimuxClosePanes<CR>nnoremap <Leader>vq :VimuxCloseRunner<CR>nnoremap <Leader>vi :VimuxInspectRunner<CR>nnoremap <Leader>vl :VimuxRunLastCommand<CR>nnoremap <Leader>vc :VimuxClearRunnerHistory<CR>" Fix bug in ruby 1.9ruby << EOFclass Object  def flush; end unless Object.new.respond_to?(:flush)endEOF"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""set default fold methodset fdm=indent" set auto change working directory to current file's pathset autochdirautocmd BufEnter * silent! lcd %:p:hset nospell" configuration for copy and paste in terminal vimvmap "+y :w !pbcopy<CR><CR>nmap "=p :r !pbpaste<CR><CR>"⌘+v pasteset pastetoggle=<F1>" equivalent alternative command is :set paste and :set nopaste" tip: use to save file which is opened without privilege" ##" w !sudo tee % " :%!sudo bash -c "cat > '%'"" ##" csslint option"let g:CSSLint_FileTypeList = ['css', 'less', 'sess']" set syntax highlighting for .md filessyntax enableau BufRead,BufNewFile *.md set filetype=markdown" json file no comma conceallet g:vim_json_syntax_conceal = 0"set conceallevel=0" set fileencoding"if has("multi_byte")"  if &termencoding == """    let &termencoding = &encoding"  endif"  set encoding=utf-8"  setglobal fileencoding=utf-8"  "setglobal bomb"  set fileencodings=ucs-bom,utf-8,latin1"endif" show invisible chars"set list" count chars and words" 1.  visually select; 2. g<C-g>" auto reload changed files" reload when entering the buffer or gaining focusau FocusGained, BufEnter * :silent! !" save when exiting the buffer or losing focusau FocusLost, WinLeave * :silent! w" css colorlet g:cssColorVimDoNotMessMyUpdatetime = 1" ariline"let g:airline#extensions#tabline#enabled = 0"let g:airline#extensions#tabline#left_sep = ' '"let g:airline#extensions#tabline#left_alt_sep = '|'let g:airline_powerline_fonts = 1let g:airline_theme = 'powerlineish'set nobackupset noswapfile" tabline customization, always show tab number on tap top" set guitablabel=%N\ %fset guitablabel=%N/\ %t\ %M" more information: help tabline & setting-tabline & guitablabel" CtrlP Configuration"Use this option to specify how the newly created file is to be opened whenlet g:ctrlp_open_new_file = 't'  "t - in a new tab.  "h - in a new horizontal split.  "v - in a new vertical split.  "r - in the current window." short cut for open file as gbk encoding"nmap  <C-N>:e ++enc=gbk<CR>" auto reload vimrc as soon as you changed itautocmd! bufwritepost .vimrc source %" Usage TIPS Accumulated"---------------------------------------------" to turn off autoindent when you paste code, " :set paste" after you pasted your code, turn off the paste-mode, so that auto-indenting" when your type works" :set nopaste" set no conceal of json quotation marks" Hacker's vimrc appended(target at c and assembly" initialisation file for vim editor." $Id: vimrc,v 1.3 2006/12/15 00:52:11 taviso Exp $" abbreviations for c programmingfunc LoadCAbbrevs()    iabbr do do {<CR>} while ();<C-O>3h<C-O>    iabbr for for (;;) {<CR>}<C-O>k<C-O>3l<C-O>    iabbr switch switch () {<CR>}<C-O>k<C-O>6l<C-O>    iabbr while while () {<CR>}<C-O>k<C-O>5l<C-O>    iabbr if if () {<CR>}<C-O>k<C-O>2l<C-O>    iabbr #d #define    iabbr #i #includeendfuncset ci sc wmnu et nosol si bs=2 ls=2set shm=IatA ww=<,>,[,] ts=4 sw=4set lcs=eol:$,tab:>-,trail:.,extends:>set pt=<F5> nomore modelines=5 modeline hls!syn onino <Down> <C-O>gjino <Up> <C-O>gknno <Down> gjnno <Up> gknno <F2> :set hls!<bar>set hls?<CR>nno <F3> :set nu!<bar>set nu?<CR>"colo torte" language dependent optionslet asmsyntax="nasm"let c_comment_strings=1let c_space_errors=0let rgb_file="/usr/lib/X11/rgb.txt"let bash_is_sh=1let highlight_function_name=1" autocommandsau FileType c,cpp call LoadCAbbrevs()" shortcut map of view file in gbk encodenmap <Leader>e :e ++enc=gbk<CR>nmap <Leader>v :set ft=velocity<CR>