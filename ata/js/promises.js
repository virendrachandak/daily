/** *@url: <http://www.html5rocks.com/en/tutorials/es6/promises/> */function promiseGet(url) {  // Return a new promise.  return new Promise(function(resolve, reject) {    // Do the ususal XHR stuff    var req = new XMLHttpRequest();    req.open('GET', url);    req.onload = function() {      // This is called even on 404 etc      // so check the status      if ( req.status == 200 ) {        // Resolve the promise with the response text        resolve(req.response);      } else {        // Otherwise reject with the status text        // wich will hopefully be a meaningful error        reject(Error(req.statusText));      }    };    // Handle network errors    req.onerror = function() {      reject(Error('Network Error'));    };    // Make the request    req.send();  });}// Usage// Transforming valuesget('http://www.html5rocks.com').then(function(response) {  console.log("Success!", response);}, function(error) {  console.error('Failed!', error);});var promise = new Promise(function(resolve, reject) {  resolve(1);});promise.then(function(val) {  console.log(val); // 1  return val + 2;}).then(function(val) {  console.log(val++); // 3  return 4;}).then(function(val) {  console.log(val); // 3});var jsonUrl = 'http://www.html5rocks.com/en/tutorials/es6/promises/story.json';get(jsonUrl).then(function(response) {  return JSON.parse(response);}).then(function(response) {  console.log('Yey JSON!', response);});// similar alternative to the above usageget(jsonUrl).then(JSON.parse).then(function(response) {  console.log('Yey JSON!', response);});// make a getJSON functionfunction getJSON(url) {  return get(url).then(JSON.parse);}getJSON('story.json').then(function(story) {  return getJSON(story.chapterUrls[0]);}).then(function(chapter1) {  console.log('Got chapter 1!', chapter1);});var storyPromise;function getChapter(i) {  storyPromise = storyPromise || getJSON('story.json');  return storyPromise.then(function(story) {    return getJSON(story.chapterUrls[i]);  });}// and using it is simple:getChapter(0).then(function(chapter) {  console.log(chapter);  return getChapter(1);}).then(function(chapter) {  console.log(chapter);});// Error handlingget('story.json').then(function(response) {  console.log('success', response);}, function(error) {  console.log('failed', error);});// equivalent alternativeget('story.json').then(function(response) {  console.log('success', response);}).catch(  function(error) {    console.log('failed', error);  });// catch is just a sugar for then(undefined, func) with more readibilitiesget('story.json').then(function(response) {  console.log('Success!', response);}).then(undefined, function(error) {  console.log('Failed', error);});// subtle difference: promise rejection skip forward if the next "then" with a// rejection callback(or "catch"), with then(func1, func2), either of them would// be called, never both. But with then(func1).catch(func2), both will be called// if func1 rejects, as they are separate steps in the chainasyncThing1().then(function() {  return asyncThing2();}).then(function() {  return asyncThing3();}).catch(function(err) {  return asyncRecovery1();}).then(  function() {    return asyncThing4();  }, function(err) {    return asyncRecovery2();  }).catch(function(err) {  console.log("Don't worry about it");}).then(function() {  console.log("All done!");});// flow chart// <http://www.html5rocks.com/en/tutorials/es6/promises/promise-flow.svg>// JavaScript exceptions and promisesvar jsonPromise = new Promise(function(resolve, reject) {  // JSON.parse throws an error if you feed it some  // invalid JSON, so this implicitly rejects:  resolve(JSON.parse("This ain't JSON"));});jsonPromise.then(function(data) {  console.log('It workd!', data);}).catch(function(err) {  // Instead, this happens.  console.log('It failed!', err);});// Error Handling in PracticegetJSON('story.json').then(function(story) {  return getJSON(story.chapterUrls[0]);}).then(function(chapter1) {  addHtmlToPage(chapter1.html);}).catch(function() {  addTextToPage('Failed to show chapter');}).then(function() {  document.querySelector('.spinner').style.display = 'none';});// ORfunction getJSON(url) {  return get(url).then(JSON.parse).catch(function(err) {    console.log("getJSON failed for", url, err);    throw err;  });}/** * Parallelism and sequencing - Getting the best of both */try {  var story = getJSONSync('story.json');  addHtmlToPage(story.heading);  story.chapterUrls.forEach(function(chapterUrl) {    var chapter = getJSONSync(chapterUrl);    addHtmlToPage(chapter.html);  });  addTextToPage("All done");} catch(err) {  addTextToPage("Argh, broken:" + err.message);}document.querySelector('.spinner').style.display = 'none';getJSON('story.json').then(function(story) {    addHtmlToPage(story.heading);  // TODO: for each url in story.chapterUrls, fetch & display}).then(function() {  // And we're all done!  addTextToPage('All done');}).catch(function(err) {  // Catch any error that happened along the way.  addTextToPage("Argh, broken:" + err.message);}).then(function() {  // Always hide the spinner  document.querySelector('.spinner').style.display = 'none';});// how to loop through the chapter urls and fetch them in order:// BAD Example which would not work!/**story.chapterUrls.forEach(function(chapterUrl) {  // Fetch chapter  getJSON(chapterUrl).then(function(chapter) {    // and add it to the page    addHtmlToPage(chapter.html);  });});*/// Creating a sequence// Start off with a promise that always resolvesvar sequence = Promise.resolve();// Loop through our chapter urlsstory.chapterUrls.forEach(function(chapterUrl) {  // Add these actions to the end of the sequence  sequence = sequence.then(function() {    return getJSON(chapterUrl);  }).then(function(chapter) {    addHtmlToPage(chapter.html);  });});//Promise.resolve creates a promise that resolves to whatever value you give it.//If you pass it an instance of Promise it'll simply return it(note: this is a//change to the spec that some implementations don't yet follow). If you pass it//something promise-like(has a 'then' method), it creates a genuine Promise that//fulfills/rejects in the same way. If you pass in any other value, eg//Promise.resolve('Hello'), it creates a promise that fulfills with that value.//If you call it with no value, as above, it fulfills with 'undefined'.// Loop through our chapter urlsstory.chapterUrls.reduce(function(sequence, chapterUrl) {  // Add these actions to the end of the sequence  return sequence.then(function() {    return getJSON(chapterUrl);  }).then(function(chapter) {    addHtmlToPage(chapter.html);  });}, Promise.resolve());/** *@description: Array.prototype.reduce() *@syntax: arr.reduce(callback, [initialValue]); *@param: callback {Function to execute on each value in the array, taking four arguments:    previousValue: The value in the last invocation of the callback, or initialValue, if supplied.    currentValue: The current element being processed in the array.    index: The index of the current element being processed in the array.    array: The array reduce Was called upon.  *@param: initialValue: Object to use as the first argument to the first call of the callback. */[1,2,3,4,5].reduce(function(q, b) { console.log(q, b); return b;});// Put it all togethergetJSON('story.json').then(function(story) {  addHtmlToPage(story.heading);  return story.chapterUrls.reduce(function(sequece, chapterUrl) {    // Once the last chapter's promise is done...    return sequence.then(function() {      // ... fetch the next chapter      return getJSON(chapterUrl);    }).then(function(chapter) {      // and add it to the page      addHtmlToPage(chapter.html);    });  }, Promise.resolve());}).then(function() {  // And we're all done!  addTextToPage('All done!');}).catch(function(err) {  // Catch any error that happened along the way  addTextToPage('Argh, broken:' + err.message);}).then(function() {  // Always hide the spinner  document.querySelector('.spinner').style.display = 'none';});/** *  Promise.all takes an array of promises and creates a promise that fulfills when all of them successfully complete. *  You get an array of results */